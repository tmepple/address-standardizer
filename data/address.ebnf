# An attempt at describing Addesses with EBNF notation
#
# [] optional item
# {} repeat 0 or more times
# UPPERCASE refer to InClass:Type tokens
#

address = [building] micro macro .

building = (PLACEN | BUILDT) words .

micro = housenum street [unit]      # US, CA, UK
      | street housenum [unit]      # Europe
      | intersection .

macro = city PROV [postal] NATION   # US, CA, UK
      | postal city [PROV] NATION . # Europe

housenum = NUMBER                                   # 123
         | [NUMBER] FRACT                           # 123 1/2 | 3/4
         | NUMBER {SINGLE | DOUBLE}                 # 123a | 123ab
         | NUMBER "/" ( SINGLE | DOUBLE )           # 1/a | 1/ab
         | DIRECT NUMBER DIRECT NUMBER              # n12e345
         | (MILE NUMBER | NUMBER MILE) .            # mile 10 | 10 KM


street = [prefixtype] (ORD | words) [suffixtype]
       | prefix ROAD (words | NUMBER [SINGLE | DOUBLE]) suffix
       | prefix (SINGLE | words) AMPERS (SINGLE | words) suffix
       | RR (words | NUMBER [SINGLE | DOUBLE])
       | box .

box = BOXH (NUMBER | MIXED | SINGLE | DOUBLE | words)

intersection = street (AMPERS | "@") street .

prefix = [QUALIF] [DIRECT] .

prefixtype = prefix type .

suffix = [DIRECT] [QUALIF] .

suffixtype = type suffix .

unit = UNITH (words | MIXED) .

words = WORD {WORD} .

type = TYPE .

city = [DIRECT] CITY
     | DIRECT words .

postal = number [number]
       | PCH [PCT]
       | QUINT [DASH] [QUAD] .


# regular expression describing basic character productions

number = R/[0-9]+/ .

single = R/[:letter:]/ .

double = R/[:letter:][:letter:]/ .

word = R/[:letter:]+/ .

